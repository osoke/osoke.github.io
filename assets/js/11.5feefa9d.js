(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{403:function(s,t,n){"use strict";n.r(t);var a=n(2),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[s._v("#")]),s._v(" 场景")]),s._v(" "),t("p",[s._v("想象这样一个情况，你用 Github Pages 搭建博客， 发现博客内容有点乱，你想清空 github 仓库重新来过，注意不是删除仓库，而是将仓库 reset 一下，回到刚创建好仓库，你正要做第 1 次 commit 的时候。可以实现这种操作吗？可以")]),s._v(" "),t("h2",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[s._v("#")]),s._v(" 原理")]),s._v(" "),t("p",[s._v("首先准备好你第一次提交的文件，现在你的仓库有1个默认 "),t("code",[s._v("分支 A")]),s._v(", 你可以创建1个新的 "),t("code",[s._v("分支 B")]),s._v(", 将准备提交的文件 commit 到 "),t("code",[s._v("分支B")]),s._v(" 中。此时就可以删除默认 "),t("code",[s._v("分支 A")]),s._v(", 然后将 "),t("code",[s._v("分支 B")]),s._v(" 设为默认分支，到这里，仓库已经在本地被 reset, 最后 push "),t("code",[s._v("分支 B")]),s._v(" 即可")]),s._v(" "),t("p",[t("strong",[s._v("具体命令如下：")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("- 克隆并查看当前分支： main/master\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/U/U.github.io.git\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch\n\n将准备提交的文件提交到新分支\n- 清空当前仓库\n- 将准备提交的文件copy进来\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout --orphan newBranch  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 生成 新分支")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"init"')]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# commit 之后新分支才会被创建")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch -D main      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除-默认分支")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch -m main      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将当前新分支设为-默认分支")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push -f origin main "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 强制推送新分支")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);